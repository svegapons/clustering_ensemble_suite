using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;


//Added
using ClusteringEnsembleSuite.Code;
using ClusteringEnsembleSuite.Code.DataStructures;
using System.Windows.Forms;
using ClusterEnsemble;
using ClusterEnsemble.LoadersAndSavers;

namespace ClusteringEnsembleSuite.Controls.Visualizers
{
    /// <summary>
    /// Interaction logic for ClusterDatails.xaml
    /// </summary>
    public partial class ClusterDatails : Window
    {
        int currentIndex;
        List<PartitionInfo> partitionsInfo;

        public ClusterDatails()
        {
            try
            {
                InitializeComponent();
            }
            catch (Exception _ex)
            {
                GeneralTools.Tools.WriteToLog(_ex);
            }
        }

        public ClusterDatails(List<PartitionInfo> partitionsInfo, int index)
            : this()
        {
            try
            {
                if (partitionsInfo == null || index >= partitionsInfo.Count || index < 0)
                    return;

                this.partitionsInfo = partitionsInfo;
                currentIndex = index;

                uctrl_Assigment.Clear();

                uctrl_Assigment.PaintClusters(partitionsInfo[index].Partition);

                tb_AlgName.Text = " Structuring No-" + currentIndex + "  Generated by " + partitionsInfo[currentIndex].AlgorithmName;

                if (partitionsInfo.Count == 1)
                {
                    this.btNext.IsEnabled = false;
                    this.btPrev.IsEnabled = false;
                }
                else
                {
                    this.btNext.IsEnabled = true;
                    this.btPrev.IsEnabled = true;
                }
            }
            catch (Exception _ex)
            {
                GeneralTools.Tools.WriteToLog(_ex);
            }
        }

        private void btPrev_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                uctrl_Assigment.Clear();
                currentIndex = currentIndex == 0 ? partitionsInfo.Count - 1 : currentIndex - 1;

                uctrl_Assigment.PaintClusters(partitionsInfo[currentIndex].Partition);
                tb_AlgName.Text = " Structuring No-" + currentIndex + " Generated by " + partitionsInfo[currentIndex].AlgorithmName;
            }
            catch (Exception _ex)
            {
                GeneralTools.Tools.WriteToLog(_ex);
            }
        }

        private void btNext_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                uctrl_Assigment.Clear();
                currentIndex = currentIndex == partitionsInfo.Count - 1 ? 0 : currentIndex + 1;

                uctrl_Assigment.PaintClusters(partitionsInfo[currentIndex].Partition);
                tb_AlgName.Text = " Structuring No-" + currentIndex + " Generated by " + partitionsInfo[currentIndex].AlgorithmName;
            }
            catch (Exception _ex)
            {
                GeneralTools.Tools.WriteToLog(_ex);
            }
        }

        private void btSave_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                SaveFileDialog _dlg = new SaveFileDialog();
                _dlg.Filter = "ARFF Documents (*.arff)|*.arff";
                _dlg.FilterIndex = 1;

                PartitionInfo _partinf = partitionsInfo[currentIndex];
                string[] names = _partinf.AlgorithmName.Split(' ');
                string final_name = "";
                foreach (string item in names)
                {
                    final_name += item;
                }

                _dlg.FileName = Enviroment.Set.RelationName + "_" + final_name;

                if (_dlg.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                {
                    string dir = _dlg.FileName;
                    ArffSaver saver = new ArffSaver(dir);
                    saver.Save(_partinf.Partition);
                }

            }
            catch (Exception _ex)
            {
                GeneralTools.Tools.WriteToLog(_ex);
            }
        }
    }
}
